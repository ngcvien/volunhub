// backend/src/index.ts
import express, { Request, Response, NextFunction } from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { connectDB } from './services/database.service';
import rootRouter from './routes/index.routes';
import errorMiddleware from './middlewares/error.middleware';

// --- TH√äM C√ÅC IMPORT CHO SOCKET.IO ---
import http from 'http'; // Module HTTP g·ªëc c·ªßa Node.js
import { Server as SocketIOServer, Socket } from 'socket.io'; // Import Server v√† Socket t·ª´ socket.io
import { verifyToken, DecodedToken } from './utils/jwt.util'; // Import h√†m verifyToken v√† DecodedToken
// --- K·∫æT TH√öC IMPORT ---

dotenv.config();
connectDB(); // K·∫øt n·ªëi DB v√† setup associations

const app = express();
const PORT = process.env.PORT || 4000;

// --- T·∫°o HTTP Server t·ª´ Express app ---
const httpServer = http.createServer(app); // <<<--- THAY ƒê·ªîI QUAN TR·ªåNG

// --- Kh·ªüi t·∫°o Socket.IO Server ---
// C·∫•u h√¨nh CORS cho Socket.IO ƒë·ªÉ frontend (v√≠ d·ª•: localhost:5173) c√≥ th·ªÉ k·∫øt n·ªëi
export const io = new SocketIOServer(httpServer, { // <<<--- EXPORT io ƒê·ªÇ D√ôNG ·ªû SERVICE
    cors: {
        origin: process.env.FRONTEND_URL || "http://localhost:5173", // URL c·ªßa frontend
        methods: ["GET", "POST"]
    }
});
// --- K·∫æT TH√öC KH·ªûI T·∫†O SOCKET.IO ---


// Middlewares c·ªßa Express (gi·ªØ nguy√™n)
app.use(cors()); // CORS cho HTTP requests
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes c·ªßa Express (gi·ªØ nguy√™n)
app.get('/', (req: Request, res: Response) => { res.send('VolunHub API is running!'); });
app.use('/api', rootRouter);

// Error Handling Middleware c·ªßa Express (gi·ªØ nguy√™n)
app.use(errorMiddleware);


// --- X·ª¨ L√ù SOCKET.IO ---

// Middleware x√°c th·ª±c cho Socket.IO (ch·∫°y cho m·ªói k·∫øt n·ªëi m·ªõi)
io.use((socket: Socket, next) => {
    // Client s·∫Ω g·ª≠i token qua socket.handshake.auth.token
    const token = socket.handshake.auth.token as string | undefined;

    if (token) {
        const decoded = verifyToken(token); // D√πng h√†m verifyToken ƒë√£ c√≥
        if (decoded && decoded.userId) {
            // G·∫Øn th√¥ng tin user v√†o socket ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
            (socket as any).user = { userId: decoded.userId, email: decoded.email }; // √âp ki·ªÉu socket
            console.log(`SOCKET: User ${decoded.userId} authenticated for socket ${socket.id}`);
            return next();
        } else {
            console.log('SOCKET: Authentication error - Invalid token');
            return next(new Error('Authentication error: Invalid token'));
        }
    } else {
        console.log('SOCKET: Authentication error - No token provided');
        return next(new Error('Authentication error: No token provided'));
    }
});

// L·∫Øng nghe s·ª± ki·ªán 'connection' t·ª´ client
io.on('connection', (socket: Socket) => {
    const connectedUser = (socket as any).user; // L·∫•y th√¥ng tin user ƒë√£ x√°c th·ª±c
    console.log(`SOCKET: User ${connectedUser?.userId} connected with socket ID ${socket.id}`);

    // L·∫Øng nghe s·ª± ki·ªán client tham gia m·ªôt cu·ªôc tr√≤ chuy·ªán
    socket.on('join_conversation', (conversationId: string | number) => {
        const roomName = `conversation_${conversationId}`;
        socket.join(roomName); // Cho socket n√†y tham gia v√†o "ph√≤ng" c·ªßa cu·ªôc tr√≤ chuy·ªán
        console.log(`SOCKET: User ${connectedUser?.userId} (socket ${socket.id}) joined room ${roomName}`);
        // C√≥ th·ªÉ emit l·∫°i cho client bi·∫øt ƒë√£ join th√†nh c√¥ng
        // socket.emit('joined_conversation_success', { conversationId });
    });

    // L·∫Øng nghe s·ª± ki·ªán client r·ªùi m·ªôt cu·ªôc tr√≤ chuy·ªán (n·∫øu c·∫ßn)
    socket.on('leave_conversation', (conversationId: string | number) => {
        const roomName = `conversation_${conversationId}`;
        socket.leave(roomName);
        console.log(`SOCKET: User ${connectedUser?.userId} (socket ${socket.id}) left room ${roomName}`);
    });

    // L·∫Øng nghe s·ª± ki·ªán client g·ª≠i tin nh·∫Øn (n·∫øu b·∫°n mu·ªën g·ª≠i qua socket thay v√¨ HTTP)
    // socket.on('send_message_socket', async (data) => {
    //     // data = { conversationId, content, messageType, mediaUrl }
    //     // T∆∞∆°ng t·ª± nh∆∞ logic trong MessageController.sendMessage
    //     // G·ªçi messageService.createMessage, sau ƒë√≥ io.to(room).emit('new_message', ...)
    // });

    // X·ª≠ l√Ω khi client ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', () => {
        console.log(`SOCKET: User ${connectedUser?.userId} (socket ${socket.id}) disconnected`);
        // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω user offline ·ªü ƒë√¢y
    });
});
// --- K·∫æT TH√öC X·ª¨ L√ù SOCKET.IO ---


// --- Kh·ªüi ƒë·ªông HTTP Server (thay v√¨ app.listen) ---
httpServer.listen(PORT,() => { // <<<--- D√ôNG httpServer.listen
    console.log(`üöÄ Server (HTTP & WebSocket) is running on http://localhost:${PORT}`);
});